from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionimport argparseimport sysfrom tensorflow.examples.tutorials.mnist import input_data# FLAGS = Nonemnist = input_data.read_data_sets("input_data/", one_hot=True)#第一次运行时候下载下来，第二层再运行直接调用数据库import tensorflow as tfsess = tf.InteractiveSession()#初始化所有的权值wdef weight_variable(shape):  initial = tf.truncated_normal(shape, stddev=0.1)#这个函数产生正太分布，均值0标准方差0.1，  return tf.Variable(initial)#初始化所有的偏置项bdef bias_variable(shape):  initial = tf.constant(0.1, shape=shape)#统一值0.1  return tf.Variable(initial)#用于构建卷基层def conv2d(x, W):  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')# strides = [batch , in_height , in_width, in_channels]。其中 batch 和 in_channels 要求一定为1，# 即只能在一个样本的一个通道上的特征图上进行移动，in_height , in_width表示卷积核在特征图的高度和宽度上移动的步长#用于构建池化层def max_pool_2x2(x):  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],                          strides=[1, 2, 2, 1], padding='SAME')#ksize表示池化窗口的大小：一个长度为4的一维列表，一般为[1, height, width, 1]，因不想在batch和channels上做池化，则将其值设为1。#x是输入的图像，y_是对应的标签(x、y_是占位符)x = tf.placeholder(tf.float32, [None, 784])y_ = tf.placeholder(tf.float32, [None, 10])#构建卷积神经网络（卷积神经网络一般包括输入层、卷积层、激励层、池化层、全连接层、输出层）W_conv1 = weight_variable([5, 5, 1, 32])#1表示输入通道数32表示输出的feature map个数b_conv1 = bias_variable([32])x_image = tf.reshape(x, [-1,28,28,1])#把图像张量（x）还原成28＊28的图像，后边的1表示黑白照片的通道数，如果彩色为3h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)#第一个卷基层（包含激励层，因为卷积层的结果为线性，所以用激励层进行一个非线性映射）h_pool1 = max_pool_2x2(h_conv1)#第一个池化层（把卷积层输出的feature map进行降维操作）W_conv2 = weight_variable([5, 5, 32, 64])b_conv2 = bias_variable([64])h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)#第二个卷基层h_pool2 = max_pool_2x2(h_conv2)#第二个池化层#全连接层（对特征进行重新拟合，减少特征信息的丢失)W_fc1 = weight_variable([7 * 7 * 64, 1024])#图片尺寸减小到7*7，上边的第二层卷积输出了64个feature map，然后加入了一个有1024#个神经元的全连接层b_fc1 = bias_variable([1024])h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])#reshape成向量h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)#全连接层keep_prob = tf.placeholder("float")#设置神经元被选中的概率,在初始化时keep_prob是一个占位符h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)#全连接层神经元使用dropout防止过拟合，keep_prob会在具体运行时赋值#输出层W_fc2 = weight_variable([1024, 10])b_fc2 = bias_variable([10])y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)#softmax层#训练cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))#交叉熵train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)#梯度下降法（优化器）#验证步骤的构型correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))#初始化sess.run(tf.global_variables_initializer())#saver = tf.train.Saver()#调用保存训练结果的类#开始训练for i in range(300):#学习300次  batch = mnist.train.next_batch(50)#每次学习50个数据  if i%100 == 0:    #验证的时候dropout=1.0，训练时=0.5    train_accuracy = sess.run(accuracy,feed_dict={x:batch[0], y_: batch[1], keep_prob: 1.0})    print("step %d, training accuracy %g" %(i, train_accuracy))  sess.run(train_step, feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5}) #save_path=saver.save(sess,"D:\anaconda\swallowsound\swallowsound\modlesave\trainmodle.ckpt")#验证最终的准确率print("test accuracy %g"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))# if __name__ == '__main__':#   parser = argparse.ArgumentParser()#   parser.add_argument('--data_dir', type=str, default="/Volumes/ZMY's Space/Practice/MNIST_data",#                       help='Directory for storing input data')#   FLAGS, unparsed = parser.parse_known_args()#   tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)